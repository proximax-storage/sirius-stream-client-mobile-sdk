// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from VideoStreamer.djinni

package com.peerstream.psp.sdk.bridge;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class VideoStreamer {
    public abstract void initialize(VideoStreamOptions options, VideoStreamerObserver observer);

    public abstract void startStreaming(VideoStreamRequestHandler handler);

    public abstract void stopStreaming();

    public abstract void startViewing(String streamId, VideoStreamRequestHandler handler);

    public abstract void stopViewing(String streamId);

    public abstract void enableAudioCapture(boolean isEnabled);

    public abstract void enableVideoCapture(boolean isEnabled);

    public abstract void setMicrophoneVolume(int val);

    public abstract void setSpeakerVolume(int val);

    public abstract void setAudioInputDevice(int index);

    public abstract void setAudioOutputDevice(int index);

    public abstract void setVideoDevice(int index);

    public abstract void setVideoCapability(int index);

    public abstract int selectedAudioInputDevice();

    public abstract int selectedAudioOutputDevice();

    public abstract int selectedVideoDevice();

    public abstract int selectedVideoCapability();

    public abstract ArrayList<String> getAudioInputDevices();

    public abstract ArrayList<String> getAudioOutputDevices();

    public abstract ArrayList<VideoStreamDevice> getVideoDevices();

    public abstract ArrayList<VideoStreamCapability> getVideoCapabilities(int index);

    public abstract void retrieveBroadcastStreamId(VideoStreamBroadcastRetrieverHandler handler);

    private static final class CppProxy extends VideoStreamer
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void initialize(VideoStreamOptions options, VideoStreamerObserver observer)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_initialize(this.nativeRef, options, observer);
        }
        private native void native_initialize(long _nativeRef, VideoStreamOptions options, VideoStreamerObserver observer);

        @Override
        public void startStreaming(VideoStreamRequestHandler handler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_startStreaming(this.nativeRef, handler);
        }
        private native void native_startStreaming(long _nativeRef, VideoStreamRequestHandler handler);

        @Override
        public void stopStreaming()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_stopStreaming(this.nativeRef);
        }
        private native void native_stopStreaming(long _nativeRef);

        @Override
        public void startViewing(String streamId, VideoStreamRequestHandler handler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_startViewing(this.nativeRef, streamId, handler);
        }
        private native void native_startViewing(long _nativeRef, String streamId, VideoStreamRequestHandler handler);

        @Override
        public void stopViewing(String streamId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_stopViewing(this.nativeRef, streamId);
        }
        private native void native_stopViewing(long _nativeRef, String streamId);

        @Override
        public void enableAudioCapture(boolean isEnabled)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_enableAudioCapture(this.nativeRef, isEnabled);
        }
        private native void native_enableAudioCapture(long _nativeRef, boolean isEnabled);

        @Override
        public void enableVideoCapture(boolean isEnabled)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_enableVideoCapture(this.nativeRef, isEnabled);
        }
        private native void native_enableVideoCapture(long _nativeRef, boolean isEnabled);

        @Override
        public void setMicrophoneVolume(int val)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMicrophoneVolume(this.nativeRef, val);
        }
        private native void native_setMicrophoneVolume(long _nativeRef, int val);

        @Override
        public void setSpeakerVolume(int val)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setSpeakerVolume(this.nativeRef, val);
        }
        private native void native_setSpeakerVolume(long _nativeRef, int val);

        @Override
        public void setAudioInputDevice(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAudioInputDevice(this.nativeRef, index);
        }
        private native void native_setAudioInputDevice(long _nativeRef, int index);

        @Override
        public void setAudioOutputDevice(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAudioOutputDevice(this.nativeRef, index);
        }
        private native void native_setAudioOutputDevice(long _nativeRef, int index);

        @Override
        public void setVideoDevice(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setVideoDevice(this.nativeRef, index);
        }
        private native void native_setVideoDevice(long _nativeRef, int index);

        @Override
        public void setVideoCapability(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setVideoCapability(this.nativeRef, index);
        }
        private native void native_setVideoCapability(long _nativeRef, int index);

        @Override
        public int selectedAudioInputDevice()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_selectedAudioInputDevice(this.nativeRef);
        }
        private native int native_selectedAudioInputDevice(long _nativeRef);

        @Override
        public int selectedAudioOutputDevice()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_selectedAudioOutputDevice(this.nativeRef);
        }
        private native int native_selectedAudioOutputDevice(long _nativeRef);

        @Override
        public int selectedVideoDevice()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_selectedVideoDevice(this.nativeRef);
        }
        private native int native_selectedVideoDevice(long _nativeRef);

        @Override
        public int selectedVideoCapability()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_selectedVideoCapability(this.nativeRef);
        }
        private native int native_selectedVideoCapability(long _nativeRef);

        @Override
        public ArrayList<String> getAudioInputDevices()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAudioInputDevices(this.nativeRef);
        }
        private native ArrayList<String> native_getAudioInputDevices(long _nativeRef);

        @Override
        public ArrayList<String> getAudioOutputDevices()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAudioOutputDevices(this.nativeRef);
        }
        private native ArrayList<String> native_getAudioOutputDevices(long _nativeRef);

        @Override
        public ArrayList<VideoStreamDevice> getVideoDevices()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getVideoDevices(this.nativeRef);
        }
        private native ArrayList<VideoStreamDevice> native_getVideoDevices(long _nativeRef);

        @Override
        public ArrayList<VideoStreamCapability> getVideoCapabilities(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getVideoCapabilities(this.nativeRef, index);
        }
        private native ArrayList<VideoStreamCapability> native_getVideoCapabilities(long _nativeRef, int index);

        @Override
        public void retrieveBroadcastStreamId(VideoStreamBroadcastRetrieverHandler handler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_retrieveBroadcastStreamId(this.nativeRef, handler);
        }
        private native void native_retrieveBroadcastStreamId(long _nativeRef, VideoStreamBroadcastRetrieverHandler handler);
    }
}
