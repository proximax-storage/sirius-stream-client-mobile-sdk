// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from Channel.djinni

#import "PSPChannel+Private.h"
#import "PSPChannel.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "PSPChannelObserver+Private.h"
#import "PSPChannelStreamHandler+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface PSPChannel ()

- (id)initWithCpp:(const std::shared_ptr<::clientsdk::Channel>&)cppRef;

@end

@implementation PSPChannel {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::clientsdk::Channel>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::clientsdk::Channel>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)setObserver:(nullable id<PSPChannelObserver>)observer {
    try {
        _cppRefHandle.get()->setObserver(::djinni::Optional<std::optional, ::djinni_generated::ChannelObserver>::toCpp(observer));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)sendRawData:(nonnull NSData *)data {
    try {
        _cppRefHandle.get()->sendRawData(::djinni::Binary::toCpp(data));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)sendMessage:(nonnull NSString *)msg {
    try {
        _cppRefHandle.get()->sendMessage(::djinni::String::toCpp(msg));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)close {
    try {
        _cppRefHandle.get()->close();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)shareStream:(nullable id<PSPChannelStreamHandler>)handler {
    try {
        _cppRefHandle.get()->shareStream(::djinni_generated::ChannelStreamHandler::toCpp(handler));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)requestStream:(nullable id<PSPChannelStreamHandler>)handler {
    try {
        _cppRefHandle.get()->requestStream(::djinni_generated::ChannelStreamHandler::toCpp(handler));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)confirmVideoStreamRequest:(nullable id<PSPChannelStreamHandler>)handler {
    try {
        _cppRefHandle.get()->confirmVideoStreamRequest(::djinni_generated::ChannelStreamHandler::toCpp(handler));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)denyVideoStreamRequest {
    try {
        _cppRefHandle.get()->denyVideoStreamRequest();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)confirmVideoStreamShare:(nullable id<PSPChannelStreamHandler>)handler {
    try {
        _cppRefHandle.get()->confirmVideoStreamShare(::djinni_generated::ChannelStreamHandler::toCpp(handler));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)denyVideoStreamShare {
    try {
        _cppRefHandle.get()->denyVideoStreamShare();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)stopViewingStream {
    try {
        _cppRefHandle.get()->stopViewingStream();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isConfirmed {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isConfirmed();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getIdentity {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getIdentity();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Channel::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Channel::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<PSPChannel>(cpp);
}

}  // namespace djinni_generated

@end
