// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from VideoStreamer.djinni

#import "PSPVideoStreamer+Private.h"
#import "PSPVideoStreamer.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "PSPVideoStreamBroadcastRetrieverHandler+Private.h"
#import "PSPVideoStreamCapability+Private.h"
#import "PSPVideoStreamDevice+Private.h"
#import "PSPVideoStreamOptions+Private.h"
#import "PSPVideoStreamRequestHandler+Private.h"
#import "PSPVideoStreamerObserver+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface PSPVideoStreamer ()

- (id)initWithCpp:(const std::shared_ptr<::clientsdk::VideoStreamer>&)cppRef;

@end

@implementation PSPVideoStreamer {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::clientsdk::VideoStreamer>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::clientsdk::VideoStreamer>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)initialize:(nonnull PSPVideoStreamOptions *)options
          observer:(nullable id<PSPVideoStreamerObserver>)observer {
    try {
        _cppRefHandle.get()->initialize(::djinni_generated::VideoStreamOptions::toCpp(options),
                                        ::djinni::Optional<std::optional, ::djinni_generated::VideoStreamerObserver>::toCpp(observer));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)startStreaming:(nullable id<PSPVideoStreamRequestHandler>)handler {
    try {
        _cppRefHandle.get()->startStreaming(::djinni_generated::VideoStreamRequestHandler::toCpp(handler));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)stopStreaming {
    try {
        _cppRefHandle.get()->stopStreaming();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)startViewing:(nonnull NSString *)streamId
             handler:(nullable id<PSPVideoStreamRequestHandler>)handler {
    try {
        _cppRefHandle.get()->startViewing(::djinni::String::toCpp(streamId),
                                          ::djinni_generated::VideoStreamRequestHandler::toCpp(handler));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)stopViewing:(nonnull NSString *)streamId {
    try {
        _cppRefHandle.get()->stopViewing(::djinni::String::toCpp(streamId));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)enableAudioCapture:(BOOL)isEnabled {
    try {
        _cppRefHandle.get()->enableAudioCapture(::djinni::Bool::toCpp(isEnabled));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)enableVideoCapture:(BOOL)isEnabled {
    try {
        _cppRefHandle.get()->enableVideoCapture(::djinni::Bool::toCpp(isEnabled));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setMicrophoneVolume:(int32_t)val {
    try {
        _cppRefHandle.get()->setMicrophoneVolume(::djinni::I32::toCpp(val));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setSpeakerVolume:(int32_t)val {
    try {
        _cppRefHandle.get()->setSpeakerVolume(::djinni::I32::toCpp(val));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAudioInputDevice:(int32_t)index {
    try {
        _cppRefHandle.get()->setAudioInputDevice(::djinni::I32::toCpp(index));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAudioOutputDevice:(int32_t)index {
    try {
        _cppRefHandle.get()->setAudioOutputDevice(::djinni::I32::toCpp(index));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setVideoDevice:(int32_t)index {
    try {
        _cppRefHandle.get()->setVideoDevice(::djinni::I32::toCpp(index));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setVideoCapability:(int32_t)index {
    try {
        _cppRefHandle.get()->setVideoCapability(::djinni::I32::toCpp(index));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)selectedAudioInputDevice {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->selectedAudioInputDevice();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)selectedAudioOutputDevice {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->selectedAudioOutputDevice();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)selectedVideoDevice {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->selectedVideoDevice();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)selectedVideoCapability {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->selectedVideoCapability();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSString *> *)getAudioInputDevices {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAudioInputDevices();
        return ::djinni::List<::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSString *> *)getAudioOutputDevices {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAudioOutputDevices();
        return ::djinni::List<::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<PSPVideoStreamDevice *> *)getVideoDevices {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getVideoDevices();
        return ::djinni::List<::djinni_generated::VideoStreamDevice>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<PSPVideoStreamCapability *> *)getVideoCapabilities:(int32_t)index {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getVideoCapabilities(::djinni::I32::toCpp(index));
        return ::djinni::List<::djinni_generated::VideoStreamCapability>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)retrieveBroadcastStreamId:(nullable id<PSPVideoStreamBroadcastRetrieverHandler>)handler {
    try {
        _cppRefHandle.get()->retrieveBroadcastStreamId(::djinni_generated::VideoStreamBroadcastRetrieverHandler::toCpp(handler));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto VideoStreamer::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto VideoStreamer::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<PSPVideoStreamer>(cpp);
}

}  // namespace djinni_generated

@end
