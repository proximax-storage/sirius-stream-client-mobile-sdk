// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ClientApp.djinni

#include "NativeClientAppObserver.hpp"  // my header
#include "Marshal.hpp"
#include "NativeClientAppExitCode.hpp"
#include "NativeClientNetworkStatus.hpp"

namespace djinni_generated {

NativeClientAppObserver::NativeClientAppObserver() : ::djinni::JniInterface<::clientsdk::ClientAppObserver, NativeClientAppObserver>() {}

NativeClientAppObserver::~NativeClientAppObserver() = default;

NativeClientAppObserver::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeClientAppObserver::JavaProxy::~JavaProxy() = default;

void NativeClientAppObserver::JavaProxy::onApplicationReady(const std::string & c_clientId) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeClientAppObserver>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onApplicationReady,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_clientId)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeClientAppObserver::JavaProxy::onApplicationExit(::clientsdk::ClientAppExitCode c_code) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeClientAppObserver>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onApplicationExit,
                           ::djinni::get(::djinni_generated::NativeClientAppExitCode::fromCpp(jniEnv, c_code)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeClientAppObserver::JavaProxy::onChannelRequested(const std::string & c_clientId, const std::string & c_userId) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeClientAppObserver>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onChannelRequested,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_clientId)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_userId)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeClientAppObserver::JavaProxy::onNetworkStatus(const std::string & c_clientId, const ::clientsdk::ClientNetworkStatus & c_status) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeClientAppObserver>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onNetworkStatus,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_clientId)),
                           ::djinni::get(::djinni_generated::NativeClientNetworkStatus::fromCpp(jniEnv, c_status)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeClientAppObserver::JavaProxy::onUserPresenceChange(const std::string & c_clientId, const std::string & c_userId, bool c_isActive) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeClientAppObserver>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onUserPresenceChange,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_clientId)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_userId)),
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_isActive)));
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
