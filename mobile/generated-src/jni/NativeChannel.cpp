// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from Channel.djinni

#include "NativeChannel.hpp"  // my header
#include "Marshal.hpp"
#include "NativeChannelObserver.hpp"
#include "NativeChannelStreamHandler.hpp"

namespace djinni_generated {

NativeChannel::NativeChannel() : ::djinni::JniInterface<::clientsdk::Channel, NativeChannel>("com/peerstream/psp/sdk/bridge/Channel$CppProxy") {}

NativeChannel::~NativeChannel() = default;


CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::clientsdk::Channel>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1setObserver(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_observer)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        ref->setObserver(::djinni::Optional<std::optional, ::djinni_generated::NativeChannelObserver>::toCpp(jniEnv, j_observer));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1sendRawData(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_data)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        ref->sendRawData(::djinni::Binary::toCpp(jniEnv, j_data));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1sendMessage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_msg)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        ref->sendMessage(::djinni::String::toCpp(jniEnv, j_msg));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1close(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        ref->close();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1shareStream(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_handler)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        ref->shareStream(::djinni_generated::NativeChannelStreamHandler::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1requestStream(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_handler)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        ref->requestStream(::djinni_generated::NativeChannelStreamHandler::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1confirmVideoStreamRequest(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_handler)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        ref->confirmVideoStreamRequest(::djinni_generated::NativeChannelStreamHandler::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1denyVideoStreamRequest(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        ref->denyVideoStreamRequest();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1confirmVideoStreamShare(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_handler)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        ref->confirmVideoStreamShare(::djinni_generated::NativeChannelStreamHandler::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1denyVideoStreamShare(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        ref->denyVideoStreamShare();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1stopViewingStream(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        ref->stopViewingStream();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1isConfirmed(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        auto r = ref->isConfirmed();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_peerstream_psp_sdk_bridge_Channel_00024CppProxy_native_1getIdentity(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::Channel>(nativeRef);
        auto r = ref->getIdentity();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
