// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from Channel.djinni

#pragma once

#include "ChannelObserver.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeChannelObserver final : ::djinni::JniInterface<::clientsdk::ChannelObserver, NativeChannelObserver> {
public:
    using CppType = std::shared_ptr<::clientsdk::ChannelObserver>;
    using CppOptType = std::shared_ptr<::clientsdk::ChannelObserver>;
    using JniType = jobject;

    using Boxed = NativeChannelObserver;

    ~NativeChannelObserver();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeChannelObserver>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeChannelObserver>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeChannelObserver();
    friend ::djinni::JniClass<NativeChannelObserver>;
    friend ::djinni::JniInterface<::clientsdk::ChannelObserver, NativeChannelObserver>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::clientsdk::ChannelObserver
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void onStreamRequested(const std::string & channelId) override;
        void onStreamShared(const std::string & channelId, const std::string & streamId) override;
        void onRawReceived(const std::string & channelId, const std::vector<uint8_t> & data) override;
        void onMessageReceived(const std::string & channelId, const std::string & msg) override;
        void onChannelError(const std::string & channelId, ::clientsdk::ChannelErrorId errorId) override;

    private:
        friend ::djinni::JniInterface<::clientsdk::ChannelObserver, ::djinni_generated::NativeChannelObserver>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/peerstream/psp/sdk/bridge/ChannelObserver") };
    const jmethodID method_onStreamRequested { ::djinni::jniGetMethodID(clazz.get(), "onStreamRequested", "(Ljava/lang/String;)V") };
    const jmethodID method_onStreamShared { ::djinni::jniGetMethodID(clazz.get(), "onStreamShared", "(Ljava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_onRawReceived { ::djinni::jniGetMethodID(clazz.get(), "onRawReceived", "(Ljava/lang/String;[B)V") };
    const jmethodID method_onMessageReceived { ::djinni::jniGetMethodID(clazz.get(), "onMessageReceived", "(Ljava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_onChannelError { ::djinni::jniGetMethodID(clazz.get(), "onChannelError", "(Ljava/lang/String;Lcom/peerstream/psp/sdk/bridge/ChannelErrorId;)V") };
};

}  // namespace djinni_generated
