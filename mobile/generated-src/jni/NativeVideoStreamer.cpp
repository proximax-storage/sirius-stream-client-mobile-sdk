// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from VideoStreamer.djinni

#include "NativeVideoStreamer.hpp"  // my header
#include "Marshal.hpp"
#include "NativeVideoStreamBroadcastRetrieverHandler.hpp"
#include "NativeVideoStreamCapability.hpp"
#include "NativeVideoStreamDevice.hpp"
#include "NativeVideoStreamOptions.hpp"
#include "NativeVideoStreamRequestHandler.hpp"
#include "NativeVideoStreamerObserver.hpp"

namespace djinni_generated {

NativeVideoStreamer::NativeVideoStreamer() : ::djinni::JniInterface<::clientsdk::VideoStreamer, NativeVideoStreamer>("com/peerstream/psp/sdk/bridge/VideoStreamer$CppProxy") {}

NativeVideoStreamer::~NativeVideoStreamer() = default;


CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::clientsdk::VideoStreamer>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1initialize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_options, jobject j_observer)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->initialize(::djinni_generated::NativeVideoStreamOptions::toCpp(jniEnv, j_options),
                        ::djinni::Optional<std::optional, ::djinni_generated::NativeVideoStreamerObserver>::toCpp(jniEnv, j_observer));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1startStreaming(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_handler)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->startStreaming(::djinni_generated::NativeVideoStreamRequestHandler::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1stopStreaming(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->stopStreaming();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1startViewing(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_streamId, jobject j_handler)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->startViewing(::djinni::String::toCpp(jniEnv, j_streamId),
                          ::djinni_generated::NativeVideoStreamRequestHandler::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1stopViewing(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_streamId)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->stopViewing(::djinni::String::toCpp(jniEnv, j_streamId));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1enableAudioCapture(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_isEnabled)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->enableAudioCapture(::djinni::Bool::toCpp(jniEnv, j_isEnabled));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1enableVideoCapture(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_isEnabled)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->enableVideoCapture(::djinni::Bool::toCpp(jniEnv, j_isEnabled));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1setMicrophoneVolume(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_val)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->setMicrophoneVolume(::djinni::I32::toCpp(jniEnv, j_val));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1setSpeakerVolume(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_val)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->setSpeakerVolume(::djinni::I32::toCpp(jniEnv, j_val));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1setAudioInputDevice(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_index)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->setAudioInputDevice(::djinni::I32::toCpp(jniEnv, j_index));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1setAudioOutputDevice(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_index)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->setAudioOutputDevice(::djinni::I32::toCpp(jniEnv, j_index));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1setVideoDevice(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_index)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->setVideoDevice(::djinni::I32::toCpp(jniEnv, j_index));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1setVideoCapability(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_index)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->setVideoCapability(::djinni::I32::toCpp(jniEnv, j_index));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1selectedAudioInputDevice(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        auto r = ref->selectedAudioInputDevice();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1selectedAudioOutputDevice(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        auto r = ref->selectedAudioOutputDevice();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1selectedVideoDevice(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        auto r = ref->selectedVideoDevice();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1selectedVideoCapability(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        auto r = ref->selectedVideoCapability();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1getAudioInputDevices(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        auto r = ref->getAudioInputDevices();
        return ::djinni::release(::djinni::List<::djinni::String>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1getAudioOutputDevices(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        auto r = ref->getAudioOutputDevices();
        return ::djinni::release(::djinni::List<::djinni::String>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1getVideoDevices(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        auto r = ref->getVideoDevices();
        return ::djinni::release(::djinni::List<::djinni_generated::NativeVideoStreamDevice>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1getVideoCapabilities(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_index)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        auto r = ref->getVideoCapabilities(::djinni::I32::toCpp(jniEnv, j_index));
        return ::djinni::release(::djinni::List<::djinni_generated::NativeVideoStreamCapability>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_VideoStreamer_00024CppProxy_native_1retrieveBroadcastStreamId(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_handler)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::VideoStreamer>(nativeRef);
        ref->retrieveBroadcastStreamId(::djinni_generated::NativeVideoStreamBroadcastRetrieverHandler::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
