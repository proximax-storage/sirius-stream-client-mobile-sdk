// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from Channel.djinni

package com.peerstream.psp.sdk.bridge;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Channel {
    public abstract void setObserver(ChannelObserver observer);

    public abstract void sendRawData(byte[] data);

    public abstract void sendMessage(String msg);

    public abstract void close();

    public abstract void shareStream(ChannelStreamHandler handler);

    public abstract void requestStream(ChannelStreamHandler handler);

    public abstract void confirmVideoStreamRequest(ChannelStreamHandler handler);

    public abstract void denyVideoStreamRequest();

    public abstract void confirmVideoStreamShare(ChannelStreamHandler handler);

    public abstract void denyVideoStreamShare();

    public abstract void stopViewingStream();

    public abstract boolean isConfirmed();

    public abstract String getIdentity();

    private static final class CppProxy extends Channel
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void setObserver(ChannelObserver observer)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setObserver(this.nativeRef, observer);
        }
        private native void native_setObserver(long _nativeRef, ChannelObserver observer);

        @Override
        public void sendRawData(byte[] data)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_sendRawData(this.nativeRef, data);
        }
        private native void native_sendRawData(long _nativeRef, byte[] data);

        @Override
        public void sendMessage(String msg)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_sendMessage(this.nativeRef, msg);
        }
        private native void native_sendMessage(long _nativeRef, String msg);

        @Override
        public void close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_close(this.nativeRef);
        }
        private native void native_close(long _nativeRef);

        @Override
        public void shareStream(ChannelStreamHandler handler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_shareStream(this.nativeRef, handler);
        }
        private native void native_shareStream(long _nativeRef, ChannelStreamHandler handler);

        @Override
        public void requestStream(ChannelStreamHandler handler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_requestStream(this.nativeRef, handler);
        }
        private native void native_requestStream(long _nativeRef, ChannelStreamHandler handler);

        @Override
        public void confirmVideoStreamRequest(ChannelStreamHandler handler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_confirmVideoStreamRequest(this.nativeRef, handler);
        }
        private native void native_confirmVideoStreamRequest(long _nativeRef, ChannelStreamHandler handler);

        @Override
        public void denyVideoStreamRequest()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_denyVideoStreamRequest(this.nativeRef);
        }
        private native void native_denyVideoStreamRequest(long _nativeRef);

        @Override
        public void confirmVideoStreamShare(ChannelStreamHandler handler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_confirmVideoStreamShare(this.nativeRef, handler);
        }
        private native void native_confirmVideoStreamShare(long _nativeRef, ChannelStreamHandler handler);

        @Override
        public void denyVideoStreamShare()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_denyVideoStreamShare(this.nativeRef);
        }
        private native void native_denyVideoStreamShare(long _nativeRef);

        @Override
        public void stopViewingStream()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_stopViewingStream(this.nativeRef);
        }
        private native void native_stopViewingStream(long _nativeRef);

        @Override
        public boolean isConfirmed()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isConfirmed(this.nativeRef);
        }
        private native boolean native_isConfirmed(long _nativeRef);

        @Override
        public String getIdentity()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getIdentity(this.nativeRef);
        }
        private native String native_getIdentity(long _nativeRef);
    }
}
