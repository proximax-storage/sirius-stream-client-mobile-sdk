// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ClientApp.djinni

#pragma once

#include "ClientChannelHandler.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeClientChannelHandler final : ::djinni::JniInterface<::clientsdk::ClientChannelHandler, NativeClientChannelHandler> {
public:
    using CppType = std::shared_ptr<::clientsdk::ClientChannelHandler>;
    using CppOptType = std::shared_ptr<::clientsdk::ClientChannelHandler>;
    using JniType = jobject;

    using Boxed = NativeClientChannelHandler;

    ~NativeClientChannelHandler();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeClientChannelHandler>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeClientChannelHandler>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeClientChannelHandler();
    friend ::djinni::JniClass<NativeClientChannelHandler>;
    friend ::djinni::JniInterface<::clientsdk::ClientChannelHandler, NativeClientChannelHandler>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::clientsdk::ClientChannelHandler
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void onChannelConfirmed(const std::string & clientId, const std::shared_ptr<::clientsdk::Channel> & channel) override;
        void onChannelResponseError(const std::string & clientId, ::clientsdk::ChannelRequestErrorId errorId) override;

    private:
        friend ::djinni::JniInterface<::clientsdk::ClientChannelHandler, ::djinni_generated::NativeClientChannelHandler>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/peerstream/psp/sdk/bridge/ClientChannelHandler") };
    const jmethodID method_onChannelConfirmed { ::djinni::jniGetMethodID(clazz.get(), "onChannelConfirmed", "(Ljava/lang/String;Lcom/peerstream/psp/sdk/bridge/Channel;)V") };
    const jmethodID method_onChannelResponseError { ::djinni::jniGetMethodID(clazz.get(), "onChannelResponseError", "(Ljava/lang/String;Lcom/peerstream/psp/sdk/bridge/ChannelRequestErrorId;)V") };
};

}  // namespace djinni_generated
