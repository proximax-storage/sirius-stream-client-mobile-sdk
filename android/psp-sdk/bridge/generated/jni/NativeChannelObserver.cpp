// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from Channel.djinni

#include "NativeChannelObserver.hpp"  // my header
#include "Marshal.hpp"
#include "NativeChannelErrorId.hpp"

namespace djinni_generated {

NativeChannelObserver::NativeChannelObserver() : ::djinni::JniInterface<::clientsdk::ChannelObserver, NativeChannelObserver>() {}

NativeChannelObserver::~NativeChannelObserver() = default;

NativeChannelObserver::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeChannelObserver::JavaProxy::~JavaProxy() = default;

void NativeChannelObserver::JavaProxy::onStreamRequested(const std::string & c_channelId) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeChannelObserver>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onStreamRequested,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_channelId)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeChannelObserver::JavaProxy::onStreamShared(const std::string & c_channelId, const std::string & c_streamId) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeChannelObserver>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onStreamShared,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_channelId)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_streamId)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeChannelObserver::JavaProxy::onRawReceived(const std::string & c_channelId, const std::vector<uint8_t> & c_data) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeChannelObserver>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onRawReceived,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_channelId)),
                           ::djinni::get(::djinni::Binary::fromCpp(jniEnv, c_data)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeChannelObserver::JavaProxy::onMessageReceived(const std::string & c_channelId, const std::string & c_msg) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeChannelObserver>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onMessageReceived,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_channelId)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_msg)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeChannelObserver::JavaProxy::onChannelError(const std::string & c_channelId, ::clientsdk::ChannelErrorId c_errorId) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeChannelObserver>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onChannelError,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_channelId)),
                           ::djinni::get(::djinni_generated::NativeChannelErrorId::fromCpp(jniEnv, c_errorId)));
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
