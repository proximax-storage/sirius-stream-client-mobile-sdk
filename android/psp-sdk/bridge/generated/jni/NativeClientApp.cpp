// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ClientApp.djinni

#include "NativeClientApp.hpp"  // my header
#include "Marshal.hpp"
#include "NativeClientAppConfig.hpp"
#include "NativeClientAppObserver.hpp"
#include "NativeClientChannelHandler.hpp"
#include "NativeClientChannelSecurity.hpp"
#include "NativeClientLogLevel.hpp"
#include "NativeClientLoginHandler.hpp"
#include "NativeClientRegisterHandler.hpp"
#include "NativeClientRegistrationData.hpp"
#include "NativeVideoStreamer.hpp"

namespace djinni_generated {

NativeClientApp::NativeClientApp() : ::djinni::JniInterface<::clientsdk::ClientApp, NativeClientApp>("com/peerstream/psp/sdk/bridge/ClientApp$CppProxy") {}

NativeClientApp::~NativeClientApp() = default;


CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::clientsdk::ClientApp>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/, jobject j_config, jobject j_observer)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::clientsdk::ClientApp::create(::djinni_generated::NativeClientAppConfig::toCpp(jniEnv, j_config),
                                                ::djinni_generated::NativeClientAppObserver::toCpp(jniEnv, j_observer));
        return ::djinni::release(::djinni_generated::NativeClientApp::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1start(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        ref->start();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1stop(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        ref->stop();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1setMinLogLevel(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_level)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        ref->setMinLogLevel(::djinni_generated::NativeClientLogLevel::toCpp(jniEnv, j_level));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1registerUser(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_handler)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        ref->registerUser(::djinni_generated::NativeClientRegisterHandler::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1login(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_userData, jobject j_handler)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        ref->login(::djinni_generated::NativeClientRegistrationData::toCpp(jniEnv, j_userData),
                   ::djinni_generated::NativeClientLoginHandler::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1getIdentity(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        auto r = ref->getIdentity();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1getVideoStreamer(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        auto r = ref->getVideoStreamer();
        return ::djinni::release(::djinni_generated::NativeVideoStreamer::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1createChannel(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_userId, jobject j_security, jobject j_handler)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        ref->createChannel(::djinni::String::toCpp(jniEnv, j_userId),
                           ::djinni_generated::NativeClientChannelSecurity::toCpp(jniEnv, j_security),
                           ::djinni_generated::NativeClientChannelHandler::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1confirmChannel(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_userId, jobject j_security, jobject j_handler)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        ref->confirmChannel(::djinni::String::toCpp(jniEnv, j_userId),
                            ::djinni_generated::NativeClientChannelSecurity::toCpp(jniEnv, j_security),
                            ::djinni_generated::NativeClientChannelHandler::toCpp(jniEnv, j_handler));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1denyChannel(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_userId)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        ref->denyChannel(::djinni::String::toCpp(jniEnv, j_userId));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1registerUserPresenceChange(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_userId)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        ref->registerUserPresenceChange(::djinni::String::toCpp(jniEnv, j_userId));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_peerstream_psp_sdk_bridge_ClientApp_00024CppProxy_native_1unregisterUserPresenceChange(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_userId)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::clientsdk::ClientApp>(nativeRef);
        ref->unregisterUserPresenceChange(::djinni::String::toCpp(jniEnv, j_userId));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
